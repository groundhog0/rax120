#!/bin/bash

arg_prefix="/usr/local"
arg_enable_emmc_storage=0
arg_enable_save_data_to_file=0
arg_enable_create_extra_tools=0
arg_with_config_magic_value=""
arg_with_random_magic_value=""
arg_with_partition_path=""
arg_with_config_space_size=0x39000

error_msg()
{
    echo "$@" >&2
    echo "please run configure -h for more information!" >&2
    exit 1
}

gen_product_config()
{
    cat <<EOF >product_config.h
#ifndef _PROD_CONFIG_H
#define _PROD_CONFIG_H 1

/* a unique value to identify one product for backup and restore. */
#define CONFIG_MAGIC	$arg_with_config_magic_value

/* a unique value to for one product for randome seek, not same as CONFIG_MAGIC. */
#define RAND_MAGIC	$arg_with_random_magic_value

/* path of the partition where to save data */
#define PATH_CONFIG_MTD	"$arg_with_partition_path"

/* config size to store data read from partiton */
#define CONFIG_SPACE    $arg_with_config_space_size

/* features, set to 1 enable and set to 0 disable. */
#define ENABLE_EMMC	$arg_enable_emmc_storage	/* use emmc storage, but not nand flash. */
#define CFG_MTD_FILE	$arg_enable_save_data_to_file	/* use a file as mtd device for debugging. */

#endif /* ifndef _PROD_CONFIG_H */
EOF
}

gen_makefile()
{
    cat <<EOF >Makefile
###################################################################################################
#               GENERATED BY CONFIGURE, PLEASE DON'T EDIT THIS FILE MANUALLY.                     #
###################################################################################################

PREFIX := $arg_prefix

override CFLAGS += -Wall -Wextra -Wundef -g -O2 -fPIC
override LDFLAGS += -L.

enable_create_extra_tools := $arg_enable_create_extra_tools
EXTRA_TOOLS_LIST :=

ifeq (\$(enable_create_extra_tools),1)
EXTRA_TOOLS_LIST += nvram readycloud_nvram
endif

libconfig_src := config.o
datalib_src := datalib.o defaults.o 
config_src := demo.o

all: libconfig.so datalib config \$(EXTRA_TOOLS_LIST)

libconfig.so: \$(libconfig_src)
	\$(CC) -shared -o \$@ \$(libconfig_src)

datalib: \$(datalib_src)
	\$(CC) \$(LDFLAGS) -o \$@ \$(datalib_src) -lmtd

config: \$(config_src) libconfig.so
	\$(CC) \$(LDFLAGS) -o \$@ \$(config_src) -lconfig

nvram: config
	ln -s $< \$@

readycloud_nvram: config
	ln -s $< \$@

%.o: %.c
	\$(CC) \$(CFLAGS) -c -o \$@ \$<

install:
	mkdir -p \$(PREFIX)/lib \$(PREFIX)/bin \$(PREFIX)/sbin
	install -m 0755 libconfig.so \$(PREFIX)/lib
	install -m 0755 config \$(PREFIX)/bin
	install -m 0755 datalib \$(PREFIX)/bin
	install -m 0755 factory_default \$(PREFIX)/sbin
ifeq (\$(enable_create_extra_tools),1)
	ln -sf config \$(PREFIX)/bin/nvram
	ln -sf config \$(PREFIX)/bin/readycloud_nvram
endif

install-dev:
	mkdir -p \$(PREFIX)/lib \$(PREFIX)/include
	install -m 0755 libconfig.so \$(PREFIX)/lib
	install -m 0644 datalib.h \$(PREFIX)/include

clean:
	rm -f *.o libconfig.so datalib config \$(EXTRA_TOOLS_LIST)
EOF
}

parse_args()
{
    while true
    do
        case "$1" in
            "--prefix="*)
                arg_prefix="${1#*--prefix=}" ;;
            "--enable-emmc-storage")
                arg_enable_emmc_storage=1 ;;
            "--enable-save-data-to-file")
                arg_enable_save_data_to_file=1 ;;
            "--enable-create-extra-tools")
                arg_enable_create_extra_tools=1 ;;
            "--with-config-magic-value="*)
                arg_with_config_magic_value="${1#*--with-config-magic-value=}" ;;
            "--with-random-magic-value="*)
                arg_with_random_magic_value="${1#*--with-random-magic-value=}" ;;
            "--with-partition-path="*)
                arg_with_partition_path="${1#*--with-partition-path=}" ;;
            "--with-config-space-size="*)
                arg_with_config_space_size="${1#*--with-config-space-size=}" ;;
            "")
                break ;;
            *)
                error_msg "unknow arg: $1" ;;
        esac
        shift
    done

    if [[ "$arg_with_config_magic_value" == "0x20200513" || -z "$arg_with_config_magic_value" ]]; then
        error_msg "config magic can't be blank or default value!"
    fi
    if [[ "$arg_with_random_magic_value" == "0x20200512" || -z "$arg_with_random_magic_value" ]]; then
        error_msg "random magic can't be blank or default value!"
    fi
    if [[ "$arg_with_config_magic_value" = "$arg_with_random_magic_value" ]]; then
        error_msg "config magic can't equal to random magic!"
    fi
    if [[ "$arg_with_partition_path" != "/dev/"* ]]; then
        error_msg "partition path should start with '/dev/'!"
    fi
}

usage()
{
    cat <<-EOF >&2
Usage:  configure [--prefix=<path>] [option]...

  --prefix=<path>
            define path prefix where to install targets, default is "/usr/local".
            will create below sub-folder to install:
            * <path>/bin: config datalib and extra tools.
            * <path>/lib: libconfig.so

[option]:
  --enable-emmc-storage
            Product use EMMC storage, otherwise assume use NAND flash.
            [optional, disabled by default]
  --enable-save-data-to-file
            save data into a local file but not partition of storage,
            it's used to build debug binary.
            [optional, disabled by default]
  --enable-create-extra-tools
            will create soft links nvram and readycloud_nvram and etc.
            [optional, disabled by default]
  --with-config-magic-value=<value>
            define unique config magic for one product.
            a hex value, like 0x20200513.
            [required]
  --with-random-magic-value=<value>
            define unique rand seed for one product, not same as config magic value.
            normally it's a hex value, like 0x20200512.
            [required]
  --with-partition-path=<path>
            define path of partition where data stores. 
            a string value, like "/dev/mtd12".
            [required]
  --with-config-space-size=<value>
            define config space size, used to store all data read from partition.
            a hex value, like 0x39000.
            [optional, default is 0x39000]
EOF
    exit 1
}

if [[ "$1" == "" || "$1" == "-h" || "$1" == "--help" ]]; then
    usage
else
    parse_args "$@"
    gen_product_config
    gen_makefile
fi
